trigger: none # Disable CI trigger

schedules:
- cron: "0 7 * * *" # 2 AM EST is 7 AM UTC
  displayName: Daily 2 AM EST run
  branches:
    include:
    - main
  always: true

parameters:
- name: googleAppName
  type: string
  default: 'Your Google App Name'
- name: appleAppName
  type: string
  default: 'Your Apple App Name'

variables:
  - name: appsUnavailable
    value: false

name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: CheckAppAvailability
  jobs:
  - job: CheckApps
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        pip install requests beautifulsoup4 google-play-scraper app-store-scraper
      displayName: 'Install dependencies'

    - task: PythonScript@0
      name: CheckAppAvailability
      inputs:
        scriptSource: 'inline'
        script: |
          import requests
          from bs4 import BeautifulSoup
          from google_play_scraper import search as google_search
          from app_store_scraper import AppStore

          def validate_google_play_app(app_name):
              base_url = "https://play.google.com/store/apps/details"
              search_url = "https://play.google.com/store/search"
              
              search_params = {'q': app_name, 'c': 'apps'}
              search_response = requests.get(search_url, params=search_params)
              search_soup = BeautifulSoup(search_response.text, 'html.parser')
              
              if app_name not in search_response.text:
                  return False, "App not found in search results"
              
              app_id = None
              for link in search_soup.find_all('a'):
                  href = link.get('href')
                  if href and 'details?id=' in href:
                      app_id = href.split('details?id=')[1].split('&')[0]
                      break
              
              if not app_id:
                  return False, "Could not find app ID in search results"
              
              params = {'id': app_id}
              headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
              
              response = requests.get(base_url, params=params, headers=headers, allow_redirects=True)
              
              if response.status_code != 200:
                  return False, f"Failed to access app page. Status code: {response.status_code}"
              
              soup = BeautifulSoup(response.text, 'html.parser')
              
              app_title = soup.find('h1', itemprop='name')
              if not app_title:
                  return False, "App title not found on page"
              
              install_button = soup.find('button', {'data-id': 'install-button'})
              if not install_button:
                  return False, "Install button not found on page"
              
              return True, f"App is available. ID: {app_id}"

          def check_app_store(app_name, country='us'):
              try:
                  app = AppStore(country=country, app_name=app_name)
                  app.review()
                  
                  if not hasattr(app, 'app_id') or app.app_id is None:
                      return False, f"App Store: App '{app_name}' not found or no app_id available."
                  
                  if not hasattr(app, 'title') or app.title is None:
                      return False, f"App Store: App '{app_name}' found, but no title available. ID: {app.app_id}"
                  
                  version = app.version if hasattr(app, 'version') else "Unknown"
                  return True, f"App Store: App '{app_name}' is available. ID: {app.app_id}, Title: {app.title}, Version: {version}"
              except AttributeError as e:
                  return False, f"App Store: Error checking app '{app_name}'. AttributeError: {str(e)}"
              except Exception as e:
                  return False, f"App Store: Error checking app '{app_name}'. Error: {str(e)}"

          google_app_name = '$(googleAppName)'
          apple_app_name = '$(appleAppName)'

          google_result, google_message = validate_google_play_app(google_app_name)
          apple_result, apple_message = check_app_store(apple_app_name)

          print(f"Google Play: {google_message}")
          print(f"App Store: {apple_message}")

          if not (google_result and apple_result):
              print("##vso[task.setvariable variable=appsUnavailable;isOutput=true]true")
              if not google_result:
                  print(f"##vso[task.logissue type=error]Google Play app unavailable: {google_message}")
              if not apple_result:
                  print(f"##vso[task.logissue type=error]Apple App Store app unavailable: {apple_message}")
              print("##vso[task.complete result=Failed;]One or both apps are not available.")
          else:
              print("Both apps are available.")
              print("##vso[task.setvariable variable=appsUnavailable;isOutput=true]false")

      displayName: 'Check app availability and version'

- stage: ManualValidation
  condition: eq(dependencies.CheckAppAvailability.outputs['CheckApps.CheckAppAvailability.appsUnavailable'], 'true')
  dependsOn: CheckAppAvailability
  jobs:
  - job: WaitForValidation
    pool: server
    timeoutInMinutes: 4320 # 3 days
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: |
          user1@example.com
          user2@example.com
        instructions: |
          One or both of the following apps are not available:
          Google Play: $(googleAppName)
          App Store: $(appleAppName)
          
          Please check the pipeline logs for more details and take necessary actions.
        onTimeout: 'resume'

- stage: FinalStage
  dependsOn: 
  - CheckAppAvailability
  - ManualValidation
  condition: |
    and(
      succeeded('CheckAppAvailability'),
      or(
        succeeded('ManualValidation'),
        not(eq(dependencies.CheckAppAvailability.outputs['CheckApps.CheckAppAvailability.appsUnavailable'], 'true'))
      )
    )
  jobs:
  - job: FinalJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Pipeline completed successfully."
      displayName: 'Final Step'
