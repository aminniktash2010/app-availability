trigger: none # Disable CI trigger

schedules:
- cron: "0 7 * * *" # 2 AM EST is 7 AM UTC
  displayName: Daily 2 AM EST run
  branches:
    include:
    - main
  always: true

parameters:
- name: googleAppId
  type: string
  default: 'com.varian.varianmobile'

variables:
  - name: appUnavailable
    value: false

name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: CheckAppAvailability
  jobs:
  - job: CheckApp
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        pip install requests beautifulsoup4
      displayName: 'Install dependencies'

    - task: PythonScript@0
      name: CheckAppAvailability
      inputs:
        scriptSource: 'inline'
        script: |
          import requests
          from bs4 import BeautifulSoup

          def validate_google_play_app(app_id):
              base_url = "https://play.google.com/store/apps/details"
              
              params = {
                  'id': app_id
              }
              headers = {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
              }
              
              response = requests.get(base_url, params=params, headers=headers, allow_redirects=True)
              
              if response.status_code != 200:
                  return False, f"Failed to access app page. Status code: {response.status_code}"
              
              if app_id not in response.text:
                  return False, "App not found"
                  
              return True, "App is available"

          google_app_id = '$(googleAppId)'

          is_valid, message = validate_google_play_app(google_app_id)

          print(f"Google Play: {message}")

          if not is_valid:
              print("##vso[task.setvariable variable=appUnavailable;isOutput=true]true")
              print(f"##vso[task.logissue type=error]Google Play app unavailable: {message}")
              print("##vso[task.complete result=Failed;]App is not available.")
          else:
              print("App is available.")
              print("##vso[task.setvariable variable=appUnavailable;isOutput=true]false")

      displayName: 'Check app availability'

- stage: ManualValidation
  condition: eq(dependencies.CheckAppAvailability.outputs['CheckApp.CheckAppAvailability.appUnavailable'], 'true')
  dependsOn: CheckAppAvailability
  jobs:
  - job: WaitForValidation
    pool: server
    timeoutInMinutes: 4320 # 3 days
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: |
          user1@example.com
          user2@example.com
        instructions: |
          The following app is not available on Google Play Store:
          App ID: $(googleAppId)
          
          Please check the pipeline logs for more details and take necessary actions.
        onTimeout: 'resume'

- stage: FinalStage
  dependsOn: 
  - CheckAppAvailability
  - ManualValidation
  condition: |
    and(
      succeeded('CheckAppAvailability'),
      or(
        succeeded('ManualValidation'),
        not(eq(dependencies.CheckAppAvailability.outputs['CheckApp.CheckAppAvailability.appUnavailable'], 'true'))
      )
    )
  jobs:
  - job: FinalJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Pipeline completed successfully."
      displayName: 'Final Step'
